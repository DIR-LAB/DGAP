#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2017-2019, Intel Corporation

#
# src/test/rpmem_basic/TEST9 -- unit test for rpmem set attributes request
#

. ../unittest/unittest.sh

require_test_type medium

. setup.sh

setup

create_poolset $DIR/pool0.set  8M:$PART_DIR/pool0.pool
create_poolset $DIR/pool1.set  8M:$PART_DIR/pool1.pool O SINGLEHDR
create_poolset $DIR/pool2.set  8M:$PART_DIR/pool2.pool O NOHDRS

run_on_node 0 "rm -rf  ${RPMEM_POOLSET_DIR[0]} $PART_DIR && mkdir -p ${RPMEM_POOLSET_DIR[0]}/subdir && mkdir -p $PART_DIR"

copy_files_to_node 0 ${RPMEM_POOLSET_DIR[0]} $DIR/{pool0.set,pool1.set,pool2.set}

# pool0:
# Create pool
ARGS="$ARGS test_create 0 pool0.set ${NODE_ADDR[0]} pool 8M none test_close 0"
# Open pool and verify if its header is in initial state
ARGS="$ARGS test_open 0 pool0.set ${NODE_ADDR[0]} pool 8M init none"
# Overwrite pool header to alternate state and close pool
ARGS="$ARGS test_set_attr 0 alt none test_close 0"
# Open pool and verify if its header is in alternate state
ARGS="$ARGS test_open 0 pool0.set ${NODE_ADDR[0]} pool 8M alt none test_close 0"

# pool1 (w/ SIGNLEHDR option):
# Create pool
ARGS="$ARGS test_create 0 pool1.set ${NODE_ADDR[0]} pool 8M singlehdr test_close 0"
# Open pool and verify if its header is in initial state
ARGS="$ARGS test_open 0 pool1.set ${NODE_ADDR[0]} pool 8M init singlehdr"
# Overwrite pool header to alternate state and close pool
ARGS="$ARGS test_set_attr 0 alt singlehdr test_close 0"
# Open pool and verify if its header is in alternate state
ARGS="$ARGS test_open 0 pool1.set ${NODE_ADDR[0]} pool 8M alt singlehdr test_close 0"

# pool2 (w/ NOHDRS option):
# Create pool
ARGS="$ARGS test_create 0 pool2.set ${NODE_ADDR[0]} pool 8M noattr test_close 0"
# Open pool and verify if its header is in initial state
ARGS="$ARGS test_open 0 pool2.set ${NODE_ADDR[0]} pool 8M init noattr"
# Overwrite pool header to alternate state and close pool
ARGS="$ARGS test_set_attr 0 alt none test_close 0"
# Open pool and verify if its header is in alternate state
ARGS="$ARGS test_open 0 pool2.set ${NODE_ADDR[0]} pool 8M alt noattr test_close 0"

expect_normal_exit run_on_node 1 ./rpmem_basic$EXESUFFIX $ARGS

check

pass
