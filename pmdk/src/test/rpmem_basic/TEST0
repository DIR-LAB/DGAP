#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2016-2019, Intel Corporation

#
# src/test/rpmem_basic/TEST0 -- unit test for rpmem create request
#

. ../unittest/unittest.sh

require_test_type medium

. setup.sh

setup

create_poolset $DIR/pool0.set  8M:$PART_DIR/pool0.part0 8M:$PART_DIR/pool0.part1
create_poolset $DIR/pool1.set 16M:$PART_DIR/pool1.part0
create_poolset $DIR/pool2.set 16M:$PART_DIR/pool2.part0
create_poolset $DIR/pool3.set  8M:$PART_DIR/pool3.part0 8M:$PART_DIR/pool3.part1
# Pool set file with duplicated part file
create_poolset $DIR/pool4.set  8M:$PART_DIR/pool3.part0 8M:$PART_DIR/pool4.part1
# Pool set file with the SINGLEHDR option
create_poolset $DIR/pool5.set  8M:$PART_DIR/pool5.part0 8M:$PART_DIR/pool5.part1 O SINGLEHDR
# Pool set file with the NOHDRS option
create_poolset $DIR/pool6.set  8M:$PART_DIR/pool6.part0 8M:$PART_DIR/pool6.part1 O NOHDRS

cp $DIR/pool0.set $DIR/pool0r.set

run_on_node 0 "rm -rf ${NODE_DIR[0]}$POOLS_DIR ${NODE_DIR[0]}$POOLS_PART && mkdir -p ${NODE_DIR[0]}$POOLS_DIR/subdir && mkdir -p ${NODE_DIR[0]}$POOLS_PART"
copy_files_to_node 0 ${NODE_DIR[0]}$POOLS_DIR $DIR/{pool0.set,pool0r.set,pool1.set,pool3.set,pool4.set,pool5.set,pool6.set}
copy_files_to_node 0 ${NODE_DIR[0]}$POOLS_DIR/subdir/ $DIR/pool2.set

# Remove read permission
run_on_node 0 chmod a-r ${NODE_DIR[0]}$POOLS_DIR/pool0r.set

# Create pool from non-existing pool set file
ARGS="$ARGS test_create 0 poolX.set ${NODE_ADDR[0]} pool 8M none"
# Create pool from pool set file which can't be read
ARGS="$ARGS test_create 0 pool0r.set ${NODE_ADDR[0]} pool 8M none"
# Create too big pool
ARGS="$ARGS test_create 0 pool0.set ${NODE_ADDR[0]} pool 32M none"
# Create pool and close it - local pool from file
ARGS="$ARGS test_create 0 pool0.set ${NODE_ADDR[0]} pool 8M none test_close 0"
# Create already existing pool
ARGS="$ARGS test_create 0 pool0.set ${NODE_ADDR[0]} pool 8M none"
# Create pool and close it - local pool from memory
ARGS="$ARGS test_create 0 pool1.set ${NODE_ADDR[0]} mem 8M none test_close 0"
# Create pool from pool set with subdirectory
ARGS="$ARGS test_create 0 subdir/pool2.set ${NODE_ADDR[0]} mem 8M none test_close 0"
# Create pool but don't close it immediately
ARGS="$ARGS test_create 0 pool3.set ${NODE_ADDR[0]} mem 8M none"
# Create already created and not closed pool
ARGS="$ARGS test_create 1 pool3.set ${NODE_ADDR[0]} mem 8M none"
# Create pool from pool set which has duplicated part file
ARGS="$ARGS test_create 2 pool4.set ${NODE_ADDR[0]} mem 8M none"
# Close previously created pool
ARGS="$ARGS test_close 0"
# Create a pool with the SINGLEHDR option
ARGS="$ARGS test_create 0 pool5.set ${NODE_ADDR[0]} pool 8M singlehdr test_close 0"
# Create a pool with the NOHDRS option
ARGS="$ARGS test_create 0 pool6.set ${NODE_ADDR[0]} pool 8M noattr test_close 0"
# Attempt to create a pool with the SINGLEHDR option and NULL pool attributes
ARGS="$ARGS test_create 0 pool5.set ${NODE_ADDR[0]} pool 8M noattr"
# Attempt to create a pool with the NOHDRS option and non-NULL pool attributes
ARGS="$ARGS test_create 0 pool6.set ${NODE_ADDR[0]} pool 8M none"

expect_normal_exit run_on_node 1 ./rpmem_basic$EXESUFFIX $ARGS

check

pass
