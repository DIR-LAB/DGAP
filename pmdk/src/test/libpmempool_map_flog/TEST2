#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2016-2018, Intel Corporation
#
#
# libpmempool_map_flog/TEST2 -- test for checking map and flog
#

. ../unittest/unittest.sh

require_test_type medium

require_fs_type any

setup

POOL=$DIR/file.pool
LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -f $LOG && touch $LOG
rm -f $LOG_TEMP && touch $LOG_TEMP
EXE=../libpmempool_api/libpmempool_test

declare -A map_err=(["Initial"]="0" ["Error"]="4"
	["Zeroed"]="8" ["Normal"]="C")

ent_val=9

for field in Zeroed Error Initial Normal;
do
	expect_normal_exit $BTTCREATE $POOL

	for((i=0;i<ent_val;i++));
	do
		spcmd="bttdevice.arena.btt_map(${i})=0x${map_err["$field"]}000000${i}"
		echo ${field}: $spcmd >> $LOG_TEMP
		$PMEMSPOIL $POOL $spcmd
	done

	spcmd="bttdevice.arena.btt_flog(3).seq=4"
	echo ${field}: $spcmd >> $LOG_TEMP
	$PMEMSPOIL $POOL $spcmd

	spcmd="bttdevice.arena.btt_flog(4).old_map=0x${map_err["$field"]}000FFFF"
	echo ${field}: $spcmd >> $LOG_TEMP
	$PMEMSPOIL $POOL $spcmd

	spcmd="bttdevice.arena.btt_flog(5).new_map=0x${map_err["$field"]}000FFFF"
	echo ${field}: $spcmd >> $LOG_TEMP
	$PMEMSPOIL $POOL $spcmd

	spcmd="bttdevice.arena.btt_flog(6).old_map=0x${map_err["$field"]}0000001"
	echo ${field}: $spcmd >> $LOG_TEMP
	$PMEMSPOIL $POOL $spcmd

	spcmd="bttdevice.arena.btt_flog(7).new_map=0x${map_err["$field"]}0000002"
	echo ${field}: $spcmd >> $LOG_TEMP
	$PMEMSPOIL $POOL $spcmd

	spcmd="bttdevice.arena.btt_flog(8).new_map=0x${map_err["$field"]}0000069"
	echo ${field}: $spcmd >> $LOG_TEMP
	$PMEMSPOIL $POOL $spcmd

	expect_normal_exit $EXE$EXESUFFIX -r 1 -t btt -a 1 $POOL
	cat $LOG >> $LOG_TEMP
done

mv $LOG_TEMP $LOG
check_file $POOL

check
pass
