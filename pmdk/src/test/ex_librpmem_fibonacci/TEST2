#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2019, Intel Corporation

#
# src/test/ex_librpmem_fibonacci/TEST2 -- fibonacci example unittest
#

. ../unittest/unittest.sh

require_test_type long

require_nodes 2

require_node_dax_device 0 1
require_node_dax_device 1 1

require_node_libfabric 0 $RPMEM_PROVIDER
require_node_libfabric 1 $RPMEM_PROVIDER

setup

init_rpmem_on_node 1 0

POOLSET=pool.set
node_0_dax=$(get_node_devdax_path 0 0)
node_1_dax=$(get_node_devdax_path 1 0)

create_poolset $DIR/$POOLSET AUTO:$node_0_dax

copy_files_to_node 0 ${NODE_DIR[0]} $DIR/$POOLSET
DAXIO_OPTS="--clear-bad-blocks=no"
expect_normal_exit run_on_node 0 ../daxio $DAXIO_OPTS -z -o \
	$node_0_dax &>> $PREP_LOG_FILE
expect_normal_exit run_on_node 1 ../daxio $DAXIO_OPTS -z -o \
	$node_1_dax &>> $PREP_LOG_FILE

rm_files_from_node 1 ${NODE_DIR[1]}/../$OUT_LOG_FILE

# happy day scenario
for i in `seq 1 100`; do
	expect_normal_exit run_on_node 1 "\"./fibonacci \
		${NODE_ADDR[0]} $POOLSET $node_1_dax >> $OUT_LOG_FILE 2>&1\""
done

TEMP=temp.log
run_on_node 1 "mv $OUT_LOG_FILE $TEMP"
# F[93] = ...
# overflow detected!
# F[94] = ... # should not happen
run_on_node 1 "cat $TEMP | grep -vwE '(Fibonacci|initializing)' > $OUT_LOG_FILE"

check

pass
