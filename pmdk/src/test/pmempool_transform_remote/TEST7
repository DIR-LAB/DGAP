#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2017-2018, Intel Corporation
#
#
# pmempool_transform_remote/TEST7 -- test for pmempool transform with SINGLEHDR
#                                    option
#
# (like TEST6 but with different alignment)
# adding a remote replica
# local replica: device daxes, 2MB alignment
# remote replica: device daxes, 4KB alignment
#

. ../unittest/unittest.sh

require_test_type	medium
require_fs_type		any

require_nodes 2
require_node_dax_device_alignments 1 $SIZE_2MB $SIZE_2MB
require_node_dax_device_alignments 0 $SIZE_4KB $SIZE_4KB

. common.sh

node_dax_device_zero 1
node_dax_device_zero 0

# Create poolset files
create_poolset $DIR/$POOLSET_LOCAL_IN \
	O SINGLEHDR \
	AUTO:$(get_node_devdax_path 1 0) \
	AUTO:$(get_node_devdax_path 1 1)

create_poolset $DIR/$POOLSET_LOCAL_OUT \
	O SINGLEHDR \
	AUTO:$(get_node_devdax_path 1 0) \
	AUTO:$(get_node_devdax_path 1 1) \
	m \
	${NODE_ADDR[0]}:$POOLSET_REMOTE

create_poolset $DIR/$POOLSET_REMOTE \
	O SINGLEHDR \
	AUTO:$(get_node_devdax_path 0 0) \
	AUTO:$(get_node_devdax_path 0 1)

OFFSET=$(get_node_devdax_size 1 0)
ROOT_SIZE=$[OFFSET + 1024]

# CLI script for writing some data hitting all the parts
WRITE_SCRIPT=write_data
cat << EOF > $DIR/$WRITE_SCRIPT
pmemobj_root $ROOT_SIZE
str_root_copy 0 TestOK111
str_root_copy $OFFSET TestOK222
EOF

# CLI script for reading 9 characters from all the parts
READ_SCRIPT=read_data
cat << EOF > $DIR/$READ_SCRIPT
str_root_print 0 9
str_root_print $OFFSET 9
EOF

copy_files_to_node 1 ${NODE_DIR[1]} $DIR/$POOLSET_LOCAL_IN
copy_files_to_node 1 ${NODE_DIR[1]} $DIR/$POOLSET_LOCAL_OUT
copy_files_to_node 0 ${NODE_DIR[0]} $DIR/$POOLSET_REMOTE
copy_files_to_node 1 ${NODE_DIR[1]} $DIR/$WRITE_SCRIPT
copy_files_to_node 1 ${NODE_DIR[1]} $DIR/$READ_SCRIPT

check_files_on_node 1 $POOLSET_LOCAL_IN $POOLSET_LOCAL_OUT $WRITE_SCRIPT $READ_SCRIPT
check_files_on_node 0 $POOLSET_REMOTE

# Create a pool
expect_normal_exit run_on_node 1 ../pmempool rm -sf ${NODE_DIR[1]}$POOLSET_LOCAL_IN
expect_normal_exit run_on_node 1 ../pmempool rm -sf ${NODE_DIR[1]}$POOLSET_LOCAL_OUT
expect_normal_exit run_on_node 1 ../pmempool create obj ${NODE_DIR[1]}$POOLSET_LOCAL_IN

# Write some data into the pool, hitting two part files
exec_pmemobjcli_script 1 ${NODE_DIR[1]}$WRITE_SCRIPT ${NODE_DIR[1]}$POOLSET_LOCAL_IN /dev/null
exec_pmemobjcli_script 1 ${NODE_DIR[1]}$READ_SCRIPT ${NODE_DIR[1]}$POOLSET_LOCAL_IN before.data.log

# Transform poolset
expect_normal_exit run_on_node 1 ../pmempool transform \
	${NODE_DIR[1]}$POOLSET_LOCAL_IN ${NODE_DIR[1]}$POOLSET_LOCAL_OUT

# Check if data is still correctly written
exec_pmemobjcli_script 1 ${NODE_DIR[1]}$READ_SCRIPT ${NODE_DIR[1]}$POOLSET_LOCAL_OUT after.data.log

# Check metadata by pmempool info
dump_info_log 1 ${NODE_DIR[1]}$POOLSET_LOCAL_OUT $LOG
dump_info_log 1 $(get_node_devdax_path 1 0) $LOG
dump_info_log 0 $(get_node_devdax_path 0 0) $LOG

# Compare the logs
diff_log 1 before.data.log after.data.log

check
pass
